/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'sparthasarathy' at '7/14/17 4:56 PM' with Gradle 3.0
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath "io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE"
        
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: "io.spring.dependency-management"


jar {
    baseName = 'hellodocker'
    version =  '0.1.0'
}
// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

group = 'sprintboot'
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencyManagement {
    imports { 
        mavenBom "org.springframework.cloud:spring-cloud-consul-dependencies:1.2.1.RELEASE" 
    }
}


// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
 	compile("org.springframework.boot:spring-boot-starter-web")
 	compile('org.springframework.cloud:spring-cloud-starter-consul-all')
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile 'junit:junit:4.12'
}


task buildDocker(type: Docker, dependsOn: build) {
  push = true
  applicationName = jar.baseName
  dockerfile = file('src/main/docker/Dockerfile')
  doFirst {
    copy {
      from jar
      into stageDir
    }
  }
}
